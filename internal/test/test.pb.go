// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.29.3
// source: test.proto

package test

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	_ "xiam.li/protonats/go"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test string `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *Test) GetTest() string {
	if x != nil {
		return x.Test
	}
	return ""
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6e, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1a, 0x0a, 0x04, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x32, 0x93, 0x12, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0f, 0x45, 0x72,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x45, 0x72, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x22,
	0x06, 0xd0, 0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0x12, 0x4d, 0x0a, 0x17, 0x45, 0x72, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x22, 0x06,
	0xd0, 0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0x12, 0x4d, 0x0a, 0x17, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e,
	0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x22, 0x06, 0xd0,
	0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0x12, 0x50, 0x0a, 0x18, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x22,
	0x06, 0xd0, 0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0x12, 0x50, 0x0a, 0x18, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x06, 0xd0, 0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0x12, 0x53, 0x0a, 0x19, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x06, 0xd0, 0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0x12, 0x48,
	0x0a, 0x12, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x22, 0x06, 0xd8, 0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0x12, 0x4b, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e,
	0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x22, 0x06, 0xd8,
	0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0x12, 0x4b, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f,
	0x6e, 0x6c, 0x79, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x06, 0xd8, 0xe4, 0xa0, 0xd9,
	0x0f, 0x01, 0x12, 0x4e, 0x0a, 0x14, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x06, 0xd8, 0xe4, 0xa0, 0xd9,
	0x0f, 0x01, 0x12, 0x57, 0x0a, 0x1b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e,
	0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x22, 0x0c, 0xd0,
	0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0xd8, 0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0x12, 0x5a, 0x0a, 0x1c, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x22, 0x0c, 0xd0, 0xe4, 0xa0, 0xd9, 0x0f,
	0x01, 0xd8, 0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0x12, 0x5a, 0x0a, 0x1c, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e,
	0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0c, 0xd0, 0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0xd8, 0xe4, 0xa0,
	0xd9, 0x0f, 0x01, 0x12, 0x5d, 0x0a, 0x1d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x0c, 0xd0, 0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0xd8, 0xe4, 0xa0, 0xd9,
	0x0f, 0x01, 0x12, 0x4a, 0x0a, 0x14, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e,
	0x6c, 0x79, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x22, 0x06, 0xd8, 0xe4, 0xa0, 0xd9, 0x0f, 0x00, 0x12, 0x4d,
	0x0a, 0x15, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x22, 0x06, 0xd8, 0xe4, 0xa0, 0xd9, 0x0f, 0x00, 0x12, 0x4d, 0x0a,
	0x15, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61,
	0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x06, 0xd8, 0xe4, 0xa0, 0xd9, 0x0f, 0x00, 0x12, 0x50, 0x0a, 0x16,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x06, 0xd8, 0xe4, 0xa0, 0xd9, 0x0f, 0x00, 0x12, 0x59,
	0x0a, 0x1d, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74,
	0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x22, 0x0c, 0xd0, 0xe4, 0xa0,
	0xd9, 0x0f, 0x01, 0xd8, 0xe4, 0xa0, 0xd9, 0x0f, 0x00, 0x12, 0x5c, 0x0a, 0x1e, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x22, 0x0c, 0xd0, 0xe4, 0xa0, 0xd9, 0x0f,
	0x01, 0xd8, 0xe4, 0xa0, 0xd9, 0x0f, 0x00, 0x12, 0x5c, 0x0a, 0x1e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0c, 0xd0, 0xe4, 0xa0, 0xd9, 0x0f, 0x01, 0xd8,
	0xe4, 0xa0, 0xd9, 0x0f, 0x00, 0x12, 0x5f, 0x0a, 0x1f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0c, 0xd0, 0xe4, 0xa0, 0xd9, 0x0f, 0x01,
	0xd8, 0xe4, 0xa0, 0xd9, 0x0f, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x65, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x1f, 0x5a, 0x1d,
	0x78, 0x69, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x2f, 0x67, 0x6f, 0x2d, 0x6e, 0x61, 0x74, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_test_proto_goTypes = []interface{}{
	(*Test)(nil),          // 0: protonats.test.Test
	(*emptypb.Empty)(nil), // 1: google.protobuf.Empty
}
var file_test_proto_depIdxs = []int32{
	0,  // 0: protonats.test.TestService.NormalTestTest:input_type -> protonats.test.Test
	1,  // 1: protonats.test.TestService.NormalEmptyTest:input_type -> google.protobuf.Empty
	0,  // 2: protonats.test.TestService.NormalTestEmpty:input_type -> protonats.test.Test
	1,  // 3: protonats.test.TestService.NormalEmptyEmpty:input_type -> google.protobuf.Empty
	0,  // 4: protonats.test.TestService.ErrServiceError:input_type -> protonats.test.Test
	0,  // 5: protonats.test.TestService.ErrServerError:input_type -> protonats.test.Test
	0,  // 6: protonats.test.TestService.ErrServiceErrorBroadcast:input_type -> protonats.test.Test
	0,  // 7: protonats.test.TestService.ErrServerErrorBroadcast:input_type -> protonats.test.Test
	0,  // 8: protonats.test.TestService.NormalBroadcastTestTest:input_type -> protonats.test.Test
	1,  // 9: protonats.test.TestService.NormalBroadcastEmptyTest:input_type -> google.protobuf.Empty
	0,  // 10: protonats.test.TestService.NormalBroadcastTestEmpty:input_type -> protonats.test.Test
	1,  // 11: protonats.test.TestService.NormalBroadcastEmptyEmpty:input_type -> google.protobuf.Empty
	0,  // 12: protonats.test.TestService.LeaderOnlyTestTest:input_type -> protonats.test.Test
	1,  // 13: protonats.test.TestService.LeaderOnlyEmptyTest:input_type -> google.protobuf.Empty
	0,  // 14: protonats.test.TestService.LeaderOnlyTestEmpty:input_type -> protonats.test.Test
	1,  // 15: protonats.test.TestService.LeaderOnlyEmptyEmpty:input_type -> google.protobuf.Empty
	0,  // 16: protonats.test.TestService.LeaderOnlyBroadcastTestTest:input_type -> protonats.test.Test
	1,  // 17: protonats.test.TestService.LeaderOnlyBroadcastEmptyTest:input_type -> google.protobuf.Empty
	0,  // 18: protonats.test.TestService.LeaderOnlyBroadcastTestEmpty:input_type -> protonats.test.Test
	1,  // 19: protonats.test.TestService.LeaderOnlyBroadcastEmptyEmpty:input_type -> google.protobuf.Empty
	0,  // 20: protonats.test.TestService.FollowerOnlyTestTest:input_type -> protonats.test.Test
	1,  // 21: protonats.test.TestService.FollowerOnlyEmptyTest:input_type -> google.protobuf.Empty
	0,  // 22: protonats.test.TestService.FollowerOnlyTestEmpty:input_type -> protonats.test.Test
	1,  // 23: protonats.test.TestService.FollowerOnlyEmptyEmpty:input_type -> google.protobuf.Empty
	0,  // 24: protonats.test.TestService.FollowerOnlyBroadcastTestTest:input_type -> protonats.test.Test
	1,  // 25: protonats.test.TestService.FollowerOnlyBroadcastEmptyTest:input_type -> google.protobuf.Empty
	0,  // 26: protonats.test.TestService.FollowerOnlyBroadcastTestEmpty:input_type -> protonats.test.Test
	1,  // 27: protonats.test.TestService.FollowerOnlyBroadcastEmptyEmpty:input_type -> google.protobuf.Empty
	1,  // 28: protonats.test.TestService.ThreeSecondDelay:input_type -> google.protobuf.Empty
	0,  // 29: protonats.test.TestService.NormalTestTest:output_type -> protonats.test.Test
	0,  // 30: protonats.test.TestService.NormalEmptyTest:output_type -> protonats.test.Test
	1,  // 31: protonats.test.TestService.NormalTestEmpty:output_type -> google.protobuf.Empty
	1,  // 32: protonats.test.TestService.NormalEmptyEmpty:output_type -> google.protobuf.Empty
	0,  // 33: protonats.test.TestService.ErrServiceError:output_type -> protonats.test.Test
	0,  // 34: protonats.test.TestService.ErrServerError:output_type -> protonats.test.Test
	0,  // 35: protonats.test.TestService.ErrServiceErrorBroadcast:output_type -> protonats.test.Test
	0,  // 36: protonats.test.TestService.ErrServerErrorBroadcast:output_type -> protonats.test.Test
	0,  // 37: protonats.test.TestService.NormalBroadcastTestTest:output_type -> protonats.test.Test
	0,  // 38: protonats.test.TestService.NormalBroadcastEmptyTest:output_type -> protonats.test.Test
	1,  // 39: protonats.test.TestService.NormalBroadcastTestEmpty:output_type -> google.protobuf.Empty
	1,  // 40: protonats.test.TestService.NormalBroadcastEmptyEmpty:output_type -> google.protobuf.Empty
	0,  // 41: protonats.test.TestService.LeaderOnlyTestTest:output_type -> protonats.test.Test
	0,  // 42: protonats.test.TestService.LeaderOnlyEmptyTest:output_type -> protonats.test.Test
	1,  // 43: protonats.test.TestService.LeaderOnlyTestEmpty:output_type -> google.protobuf.Empty
	1,  // 44: protonats.test.TestService.LeaderOnlyEmptyEmpty:output_type -> google.protobuf.Empty
	0,  // 45: protonats.test.TestService.LeaderOnlyBroadcastTestTest:output_type -> protonats.test.Test
	0,  // 46: protonats.test.TestService.LeaderOnlyBroadcastEmptyTest:output_type -> protonats.test.Test
	1,  // 47: protonats.test.TestService.LeaderOnlyBroadcastTestEmpty:output_type -> google.protobuf.Empty
	1,  // 48: protonats.test.TestService.LeaderOnlyBroadcastEmptyEmpty:output_type -> google.protobuf.Empty
	0,  // 49: protonats.test.TestService.FollowerOnlyTestTest:output_type -> protonats.test.Test
	0,  // 50: protonats.test.TestService.FollowerOnlyEmptyTest:output_type -> protonats.test.Test
	1,  // 51: protonats.test.TestService.FollowerOnlyTestEmpty:output_type -> google.protobuf.Empty
	1,  // 52: protonats.test.TestService.FollowerOnlyEmptyEmpty:output_type -> google.protobuf.Empty
	0,  // 53: protonats.test.TestService.FollowerOnlyBroadcastTestTest:output_type -> protonats.test.Test
	0,  // 54: protonats.test.TestService.FollowerOnlyBroadcastEmptyTest:output_type -> protonats.test.Test
	1,  // 55: protonats.test.TestService.FollowerOnlyBroadcastTestEmpty:output_type -> google.protobuf.Empty
	1,  // 56: protonats.test.TestService.FollowerOnlyBroadcastEmptyEmpty:output_type -> google.protobuf.Empty
	1,  // 57: protonats.test.TestService.ThreeSecondDelay:output_type -> google.protobuf.Empty
	29, // [29:58] is the sub-list for method output_type
	0,  // [0:29] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
