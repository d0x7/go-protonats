syntax = "proto3";

package protonats.go.test;

import "google/protobuf/empty.proto";
import "protonats.proto";

option go_package = "xiam.li/go-protonats/internal/test";

service TestService {
  // Normal tests
  rpc NormalTestTest(Test) returns (Test);
  rpc NormalEmptyTest(google.protobuf.Empty) returns (Test);
  rpc NormalTestEmpty(Test) returns (google.protobuf.Empty);
  rpc NormalEmptyEmpty(google.protobuf.Empty) returns (google.protobuf.Empty);

  // Methods that will expect an error in the test implementation
  rpc ErrServiceError(Test) returns (Test);
  rpc ErrServerError(Test) returns (Test);
  rpc ErrServiceErrorBroadcast(Test) returns (Test) {
    option (protonats.broadcast) = true;
  }
  rpc ErrServerErrorBroadcast(Test) returns (Test) {
    option (protonats.broadcast) = true;
  }

  // Normal tests with broadcast option
  rpc NormalBroadcastTestTest(Test) returns (Test) {
    option (protonats.broadcast) = true;
  }
  rpc NormalBroadcastEmptyTest(google.protobuf.Empty) returns (Test) {
    option (protonats.broadcast) = true;
  }
  rpc NormalBroadcastTestEmpty(Test) returns (google.protobuf.Empty) {
    option (protonats.broadcast) = true;
  }
  rpc NormalBroadcastEmptyEmpty(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (protonats.broadcast) = true;
  }

  // Leader option tests
  rpc LeaderOnlyTestTest(Test) returns (Test) {
    option (protonats.consensus_target) = LEADER;
  }
  rpc LeaderOnlyEmptyTest(google.protobuf.Empty) returns (Test) {
    option (protonats.consensus_target) = LEADER;
  }
  rpc LeaderOnlyTestEmpty(Test) returns (google.protobuf.Empty) {
    option (protonats.consensus_target) = LEADER;
  }
  rpc LeaderOnlyEmptyEmpty(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (protonats.consensus_target) = LEADER;
  }

  // Leader with broadcast option tests
  rpc LeaderOnlyBroadcastTestTest(Test) returns (Test) {
    option (protonats.consensus_target) = LEADER;
    option (protonats.broadcast) = true;
  }
  rpc LeaderOnlyBroadcastEmptyTest(google.protobuf.Empty) returns (Test) {
    option (protonats.consensus_target) = LEADER;
    option (protonats.broadcast) = true;
  }
  rpc LeaderOnlyBroadcastTestEmpty(Test) returns (google.protobuf.Empty) {
    option (protonats.consensus_target) = LEADER;
    option (protonats.broadcast) = true;
  }
  rpc LeaderOnlyBroadcastEmptyEmpty(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (protonats.consensus_target) = LEADER;
    option (protonats.broadcast) = true;
  }

  // Follower option tests
  rpc FollowerOnlyTestTest(Test) returns (Test) {
    option (protonats.consensus_target) = FOLLOWER;
  }
  rpc FollowerOnlyEmptyTest(google.protobuf.Empty) returns (Test) {
    option (protonats.consensus_target) = FOLLOWER;
  }
  rpc FollowerOnlyTestEmpty(Test) returns (google.protobuf.Empty) {
    option (protonats.consensus_target) = FOLLOWER;
  }
  rpc FollowerOnlyEmptyEmpty(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (protonats.consensus_target) = FOLLOWER;
  }

  // Follower with broadcast option tests
  rpc FollowerOnlyBroadcastTestTest(Test) returns (Test) {
    option (protonats.consensus_target) = FOLLOWER;
    option (protonats.broadcast) = true;
  }
  rpc FollowerOnlyBroadcastEmptyTest(google.protobuf.Empty) returns (Test) {
    option (protonats.consensus_target) = FOLLOWER;
    option (protonats.broadcast) = true;
  }
  rpc FollowerOnlyBroadcastTestEmpty(Test) returns (google.protobuf.Empty) {
    option (protonats.consensus_target) = FOLLOWER;
    option (protonats.broadcast) = true;
  }
  rpc FollowerOnlyBroadcastEmptyEmpty(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (protonats.consensus_target) = FOLLOWER;
    option (protonats.broadcast) = true;
  }

  // Special cases
  rpc ThreeSecondDelay(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message Test {
  string test = 1;
}
